#version 450

#extension GL_GOOGLE_include_directive : enable
#include "scene_ubo.glsl"
#include "bindless.glsl"

layout (local_size_x = 32, local_size_y = 32) in;

struct DrawCommand
{
  uint indexCount;
  uint instanceCount;
  uint firstIndex;
  int vertexOffset;
  uint firstInstance;
};

struct GrassDrawCommand
{
  uint vertexCount;
  uint instanceCount;
  uint firstVertex;
  uint firstInstance;
};

struct GrassObj
{
  vec4 worldPos;
  vec4 cpData0;
  vec4 cpData1;
  vec4 cpData2;
  vec4 widthDir;
};

struct TranslationId
{
  uint renderableId;
  uint meshId;
};

layout(std430, set = 1, binding = 0) buffer DrawBuffer {
  DrawCommand draws[];
} drawBuffer;

layout(std430, set = 1, binding = 1) buffer TranslationBuffer {
  TranslationId ids[];
} translationBuffer;

layout(std430, set = 1, binding = 2) buffer GrassDrawBuffer {
  GrassDrawCommand draw;
} grassDrawBuffer;

layout(std430, set = 1, binding = 3) buffer GrassObjBuffer {
  GrassObj blades[];
} grassObjBuffer;

layout(set = 1, binding = 4) uniform sampler2D hiZ64;
layout(set = 1, binding = 5) uniform sampler2D hiZ32;
layout(set = 1, binding = 6) uniform sampler2D hiZ16;
layout(set = 1, binding = 7) uniform sampler2D hiZ8;
layout(set = 1, binding = 8) uniform sampler2D hiZ4;
layout(set = 1, binding = 9) uniform sampler2D hiZ2;

layout(std430, set = 1, binding = 10) buffer DebugSphereDrawBuffer {
  DrawCommand draw;
} debugSphereDrawBuffer;

layout(std430, set = 1, binding = 11) buffer DebugSphereTranslationBuffer {
  TranslationId ids[];
} debugSphereTransBuffer;

layout(push_constant) uniform constants {
  mat4 view;
  vec4 frustumPlanes[4];
  float nearDist;
  float farDist;
  uint drawCount;
  float windDirX;
  float windDirY;
} pushConstants;

const uint k = 1103515245U;  // GLIB C

vec3 hash(uvec3 x)
{
  x = ((x>>8U)^x.yzx)*k;
  x = ((x>>8U)^x.yzx)*k;
  x = ((x>>8U)^x.yzx)*k;
    
  return vec3(x)*(1.0/float(0xffffffffU));
}

float rand(vec2 co){
  return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

// 2D Polyhedral Bounds of a Clipped, Perspective-Projected 3D Sphere. Michael Mara, Morgan McGuire. 2013
bool projectSphere(vec3 C, float r, float znear, float P00, float P11, out vec4 aabb)
{
  if (C.z > r + znear)
    return false;

  vec2 cx = -C.xz;
  vec2 vx = vec2(sqrt(dot(cx, cx) - r * r), r);
  vec2 minx = mat2(vx.x, vx.y, -vx.y, vx.x) * cx;
  vec2 maxx = mat2(vx.x, -vx.y, vx.y, vx.x) * cx;

  vec2 cy = -C.yz;
  vec2 vy = vec2(sqrt(dot(cy, cy) - r * r), r);
  vec2 miny = mat2(vy.x, vy.y, -vy.y, vy.x) * cy;
  vec2 maxy = mat2(vy.x, -vy.y, vy.y, vy.x) * cy;

  aabb = vec4(minx.x / minx.y * P00, miny.x / miny.y * P11, maxx.x / maxx.y * P00, maxy.x / maxy.y * P11);
  aabb = aabb.xwzy * vec4(0.5f, -0.5f, 0.5f, -0.5f) + vec4(0.5f); // clip space -> uv space

  return true;
}

bool projectSphere2(vec3 sphereView, float radius, out vec4 aabb, out vec2 zMinMax)
{
  vec3 botRightViewFar = vec3(sphereView.x + radius, sphereView.y - radius, sphereView.z - radius);
  vec3 topLeftViewFar = vec3(sphereView.x - radius, sphereView.y + radius, sphereView.z - radius);
  vec3 botRightViewNear = vec3(sphereView.x + radius, sphereView.y - radius, sphereView.z + radius);
  vec3 topLeftViewNear = vec3(sphereView.x - radius, sphereView.y + radius, sphereView.z + radius);

  vec4 botRightNDCFar = ubo.proj * vec4(botRightViewFar, 1.0);
  botRightNDCFar /= botRightNDCFar.w;

  vec4 topLeftNDCFar = ubo.proj * vec4(topLeftViewFar, 1.0);
  topLeftNDCFar /= topLeftNDCFar.w;

  vec4 botRightNDCNear = ubo.proj * vec4(botRightViewNear, 1.0);
  botRightNDCNear /= botRightNDCNear.w;

  vec4 topLeftNDCNear = ubo.proj * vec4(topLeftViewNear, 1.0);
  topLeftNDCNear /= topLeftNDCNear.w;

  if (abs(topLeftNDCFar.x) > 1.0 ||
    abs(topLeftNDCFar.y) > 1.0 ||
    topLeftNDCFar.z > 1.0 ||
    topLeftNDCFar.z < 0.0) {
    return false;
  }

  if (abs(botRightNDCFar.x) > 1.0 ||
    abs(botRightNDCFar.y) > 1.0 ||
    botRightNDCFar.z > 1.0 ||
    botRightNDCFar.z < 0.0) {
    return false;
  }

  if (abs(topLeftNDCNear.x) > 1.0 ||
    abs(topLeftNDCNear.y) > 1.0 ||
    topLeftNDCNear.z > 1.0 ||
    topLeftNDCNear.z < 0.0) {
    return false;
  }

  if (abs(botRightNDCNear.x) > 1.0 ||
    abs(botRightNDCNear.y) > 1.0 ||
    botRightNDCNear.z > 1.0 ||
    botRightNDCNear.z < 0.0) {
    return false;
  }

  float minZ = min(topLeftNDCNear.z, botRightNDCNear.z);
  float maxZ = max(topLeftNDCFar.z, botRightNDCFar.z);
  zMinMax = vec2(minZ, maxZ);

  // -1 to 1 to 0 to 1
  botRightNDCFar = botRightNDCFar * 0.5 + 0.5;
  topLeftNDCFar = topLeftNDCFar * 0.5 + 0.5;
  botRightNDCNear = botRightNDCNear * 0.5 + 0.5;
  topLeftNDCNear = topLeftNDCNear * 0.5 + 0.5;

  // (minx, maxx, miny, maxy)
  aabb = vec4(topLeftNDCFar.x, botRightNDCFar.x, topLeftNDCFar.y, botRightNDCFar.y);

  return true;
}

bool sphereVisible(vec3 sphereCenter, float sphereRadius)
{
  bool visible = true;
  for (int i = 0; i < 4; i++) {
    vec3 frustumNormal = pushConstants.frustumPlanes[i].xyz;
    float frustumD = pushConstants.frustumPlanes[i].w;
    bool inFrustum = (dot(sphereCenter, frustumNormal) + frustumD + sphereRadius) >= 0.0;
    visible = visible && inFrustum;
  }

  return visible;
}

const vec3 up = vec3(0.0, 1.0, 0.0);

float sampleHiZ(vec2 coords, uint level)
{
  float ret = 0.0;

  if (level == 0) {
    ret = texture(hiZ64, coords).r;
  }
  else if (level == 1) {
    ret = texture(hiZ32, coords).r;
  }
   else if (level == 2) {
    ret = texture(hiZ16, coords).r;
  }
  else if (level == 3) {
    ret = texture(hiZ8, coords).r;
  }
  else if (level == 4) {
    ret = texture(hiZ4, coords).r;
  }
  else if (level == 5 || level == 6) {
    ret = texture(hiZ2, coords).r;
  }

  return ret;
}

bool occlusionCull(vec3 sphereCenterView, float radius)
{
  bool visible = true;

  // aabb is (minx, maxx, miny, maxy) in 0-1 coords in NDC space
  vec4 aabb;
  vec2 zMinMax;
  bool projOk = projectSphere2(sphereCenterView, radius, aabb, zMinMax);
  if (projOk) {
    float width = (aabb.y - aabb.x) * 64.0;
    float height = (aabb.w - aabb.z) * 64.0;

    uint level = uint(max(floor(log2(max(width, height))), 1));

    float depth = 1.0;
    float depth0 = sampleHiZ(vec2(aabb.xz), level - 1);
    float depth1 = sampleHiZ(vec2(aabb.yw), level - 1);
    float depth2 = sampleHiZ(vec2(aabb.xw), level - 1);
    float depth3 = sampleHiZ(vec2(aabb.yz), level - 1);

    depth = max(max(depth0, depth1), max(depth2, depth3));

    vec3 adjusted = vec3(sphereCenterView.x, sphereCenterView.y, sphereCenterView.z + radius);
    vec4 projected = ubo.proj * vec4(adjusted, 1.0);
    projected /= projected.w;
    float depthSphere = zMinMax.x;//projected.z;//pushConstants.nearDist / (sphereCenterView.z - radius);

    visible = depthSphere <= depth;
  }

  return visible;
}

mat4 buildTranslation(mat4 model)
{
  vec3 delta = vec3(model[3][0], model[3][1], model[3][2]);

  return mat4(
        vec4(1.0, 0.0, 0.0, 0.0),
        vec4(0.0, 1.0, 0.0, 0.0),
        vec4(0.0, 0.0, 1.0, 0.0),
        vec4(delta, 1.0));
}

void main()
{
  // Renderable culling
  uint gID = gl_GlobalInvocationID.x * gl_NumWorkGroups.x * 32 + gl_GlobalInvocationID.y;

  if (gID < pushConstants.drawCount) {

    // Check visibility against frustum planes
    bool visible = renderableBuffer.renderables[gID].visible == 1 ? true : false;
    if (visible) {

      mat4 model = renderableBuffer.renderables[gID].transform;
      mat4 trans = buildTranslation(model);
      vec4 sphereBounds = renderableBuffer.renderables[gID].bounds;
      float radius = sphereBounds.w;
      vec3 sphereCenterView = vec3(pushConstants.view * trans * vec4(sphereBounds.xyz, 1.0));
      vec3 sphereCenter = vec3(trans * vec4(sphereBounds.xyz, 1.0));

      visible = visible && sphereCenterView.z + radius > -pushConstants.farDist;
      visible = visible && sphereCenterView.z - radius < pushConstants.nearDist;
      visible = visible && sphereVisible(sphereCenter, radius);

      if (visible) {

        // Do occlusion culling
        visible = occlusionCull(sphereCenterView, radius);

        if (visible) {
          for (int i = 0; i < renderableBuffer.renderables[gID].numMeshIds; ++i) {
            uint meshId = renderableBuffer.renderables[gID].firstMeshId + i;
            uint countBefore = atomicAdd(drawBuffer.draws[meshId].instanceCount, 1);

            // Update translation buffer (from gl_InstanceIndex to renderableId and meshId)
            uint instanceIndex = drawBuffer.draws[meshId].firstInstance + countBefore;
            translationBuffer.ids[instanceIndex].renderableId = gID;
            translationBuffer.ids[instanceIndex].meshId = meshId;

            // Also add debug sphere instances if it is enabled
            if (ubo.visualizeBoundingSpheresEnabled == 1) {
              uint countBef = atomicAdd(debugSphereDrawBuffer.draw.instanceCount, 1);
              debugSphereTransBuffer.ids[countBef].renderableId = gID;
              debugSphereTransBuffer.ids[countBef].meshId = meshId;
            }
          }
        }
      }
    }
  }

  // Grass
  uint xPos = gl_GlobalInvocationID.x;
  uint yPos = gl_GlobalInvocationID.y;

  vec3 worldPos = vec3(xPos*0.08, .25, yPos*0.08);
  vec3 worldPosView = vec3(pushConstants.view * vec4(worldPos, 1.0));
  float radius = 1.5;
  bool visible = sphereVisible(worldPos, radius);
  visible = visible && occlusionCull(worldPosView, radius);

  if (visible) {
    uint countBefore = atomicAdd(grassDrawBuffer.draw.instanceCount, 1);

    float bladeHash = rand(vec2(worldPos.x, worldPos.z));
    vec2 bladeHash2D = vec2(
      rand(vec2(worldPos.x / bladeHash, worldPos.z)),
      rand(vec2(worldPos.x, worldPos.z * bladeHash)));

    // Jitter position slightly
    worldPos.x += bladeHash * 0.5;
    worldPos.z += bladeHash * 0.5;

    uint instanceIndex = grassDrawBuffer.draw.firstInstance + countBefore;

    // Data used to construct control points
    float height = 1.0 * max(bladeHash2D.y, 0.3);
    float windStrength = texture(windForceTex, vec2(float(xPos)/256.0, float(yPos)/256.0)).r;
    vec2 windDir = vec2(pushConstants.windDirX, pushConstants.windDirY);
    float tilt = min(bladeHash + windStrength, 1.0);
    float bend = bladeHash < 0.05 ? 0.0 : .1;
    vec2 facing2D = normalize(bladeHash2D * 2.0 - 1.0);
    facing2D = normalize(facing2D*(1.0 - windStrength) + windDir*windStrength);
    vec3 facing = vec3(facing2D.x, 0.0, facing2D.y);

    vec3 widthDir = vec3(0.0, 0.0, 0.0);
    widthDir.x = facing.z;
    widthDir.z = -facing.x;

    // Find control points of the bezier curve
    vec3 p0 = worldPos.xyz;

    // End point, or tip, is dictated by base point and the tilt
    vec3 p3 = p0 + facing * tilt + up * height;

    vec3 bladeDir = normalize(p3 - p0);
    vec3 away = cross(-widthDir, bladeDir);

    // p1 is straight above p0
    vec3 p1 = p0 + up * height * bend;

    // The shaping control point is dictated by the bend parameter
    vec3 p2 = p0 + 0.5 * (p3 - p0);
    p2 = p2 + away * bend;

    // Attempt animation, find vector perpendicular to blade dir
    float phaseOffset = bladeHash * 1.57;
    float speedMult = 2.0 * (bladeHash + 1.0) * (windStrength + 1.0);
    float maxAmplitude = 0.01 * (windStrength + 3.0);
    float timeMod = mod(ubo.time, 2.0*acos(-1.0)); // To stop loss of precision when ubo.time gets big
    p3 = p3 + sin(timeMod*speedMult + phaseOffset)*maxAmplitude*away;
    p2 = p2 + sin(timeMod*speedMult + 1.57 + phaseOffset)*maxAmplitude/2.0*away;

    grassObjBuffer.blades[instanceIndex].worldPos = vec4(worldPos, height);
    grassObjBuffer.blades[instanceIndex].widthDir = vec4(widthDir, bladeHash);
    grassObjBuffer.blades[instanceIndex].cpData0 = vec4(p0, p1.x);
    grassObjBuffer.blades[instanceIndex].cpData1 = vec4(p1.yz, p2.xy);
    grassObjBuffer.blades[instanceIndex].cpData2 = vec4(p2.z, p3);
  }
}