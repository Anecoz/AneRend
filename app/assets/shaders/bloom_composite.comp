#version 450

#extension GL_GOOGLE_include_directive : enable

layout (local_size_x = 8, local_size_y = 8) in;

#include "sampling.glsl"
#include "bindless.glsl"
#include "octahedron_helpers.glsl"
#include "pbr_light.glsl"

layout(set = 1, binding = 0, rgba8) uniform writeonly image2D outputIm;
layout(set = 1, binding = 1) uniform sampler2D inputImBloom;
layout(set = 1, binding = 2) uniform sampler2D inputImScene;

layout(std430, set = 1, binding = 3) buffer AverageBuffer {
  float avgLum[];
} averageBuffer;

void main() {
  ivec2 imSize = imageSize(outputIm);

  if (gl_GlobalInvocationID.x > imSize.x || gl_GlobalInvocationID.y > imSize.y) {
    return;
  }

  ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
  vec2 texCoords = pixelToUv(pixel, imSize);
  ivec2 bloomImSize = textureSize(inputImBloom, 0);

  vec4 color = UpsampleTent(inputImBloom, texCoords, vec2(1.0 / vec2(bloomImSize)), vec4(1.0));
  color = texture(inputImScene, texCoords) + color;

  // Apply tonemap to luminance (https://bruop.github.io/tonemapping/)
  // Yxy.x is Y, the luminance
  vec3 Yxy = convertRGB2Yxy(color.rgb);
  float whitePoint = 4.0;
  float avgLum = averageBuffer.avgLum[0];

  avgLum = clamp(avgLum, 0.005, 1.0);

  // Exposure adjusting using average luminance
  //avgLum = binAvgLum(avgLum);
  float lp = Yxy.x / (9.6 * avgLum + 0.0001);

  Yxy.x = fastAcesTonemapLum(lp);

  color.rgb = convertYxy2RGB(Yxy);

  //color = vec4(fastAcesTonemap(color.rgb), color.a);

  imageStore(outputIm, pixel, color);
}