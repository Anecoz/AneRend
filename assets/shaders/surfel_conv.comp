#version 450

#extension GL_GOOGLE_include_directive : enable

#include "scene_ubo.glsl"
#include "octahedron_helpers.glsl"

layout (local_size_x = 8, local_size_y = 8) in;

layout(set = 1, binding = 0, rgba8) uniform readonly image2D inputIm;
layout(set = 1, binding = 1, rgba8) uniform writeonly image2D outputIm;

void main()
{
  const int surfelPixelSize = 32;
  const int octPixelSize = 8;
  const int xs = 480;
  const int ys = 272;

  if (gl_GlobalInvocationID.x > xs || gl_GlobalInvocationID.y > ys) {
    return;
  }
  
  ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
  vec2 texCoords = vec2(pixel) / vec2(xs - 1, ys - 1);

  ivec2 surfIdx = pixel / octPixelSize;
  ivec2 surfStartPixel = surfIdx * (octPixelSize + 2) + 1;
  ivec2 pixelWithinSurfel = pixel - surfIdx * octPixelSize;

  // 8x8 kernel
  int kernelSize = 8;

  ivec2 pixOffset = 2 * surfIdx + 1;
  vec2 octUv = vec2(float(pixelWithinSurfel.x) + 0.5, float(pixelWithinSurfel.y) + 0.5) / float(octPixelSize);
  octUv = octUv * 2.0 - 1.0;
  vec3 octDir = octDecode(octUv);

  vec4 result = vec4(0.0);
  for (int x = 0; x < kernelSize; ++x) {
    for (int y = 0; y < kernelSize; ++y) {
      
      if (x > xs - 1 || y > ys - 1) {
        continue;
      }

      ivec2 currPix = surfStartPixel + ivec2(x, y);
      vec2 currOctUv = vec2(float(x) + 0.5, float(y) + 0.5) / float(octPixelSize);
      currOctUv = currOctUv * 2.0 - 1.0;
      vec3 currOctDir = octDecode(currOctUv);

      vec3 irradiance = imageLoad(inputIm, currPix).rgb;
      float weight = max(0.0, dot(currOctDir, octDir));
      if (weight > 1e-6) {
        result += vec4(weight * irradiance, weight);
      }
    }
  }

  if (result.w > 1e-6) {
    result.rgb /= result.w;
  }

  imageStore(outputIm, pixOffset + pixel, vec4(result.rgb, 1.0));
}