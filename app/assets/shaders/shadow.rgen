#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_GOOGLE_include_directive : enable

#include "scene_ubo.glsl"
#include "bindless.glsl"
#include "bindless_tlas.glsl"
#include "helpers.glsl"

struct hitPayload
{
  float hitValue;
};

layout(location = 0) rayPayloadEXT hitPayload prd;

layout(set = 1, binding = 0) uniform sampler2D depth;
layout(set = 1, binding = 1, r32f) uniform writeonly image2D outputIm;

vec3 calcWorldPos(vec2 texCoord, float depthSamp)
{
  vec4 clipSpacePos = vec4(texCoord * 2.0 - vec2(1.0), depthSamp, 1.0);

  //vec4 position = inverse_projection_matrix * clip_space_position; // Use this for view space
  vec4 position = ubo.invViewProj * clipSpacePos; // Use this for world space

  return(position.xyz / position.w);
}

void main()
{
  if (ubo.rtShadowsEnabled != 1) {
    return;
  }

  const ivec2 pixel = ivec2(gl_LaunchIDEXT.xy);
  //vec2 texCoords = vec2(pixel) / vec2(ubo.screenWidth - 1, ubo.screenHeight - 1);
  vec2 texCoords = pixelToUv(pixel, ivec2(ubo.screenWidth, ubo.screenHeight));

  // Early exit if we're in the sky
  float depthSamp = texture(depth, texCoords).r;

  if (depthSamp == 1.0f) {
    imageStore(outputIm, pixel, vec4(1.0));
    return;
  }

  /*const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
  vec2 d = inUV * 2.0 - 1.0;

  vec4 origin    = ubo.invView * vec4(0, 0, 0, 1);
  vec4 target    = ubo.invProj * vec4(d.x, d.y, 1, 1);
  vec4 direction = ubo.invView * vec4(normalize(target.xyz), 0);*/

  vec3 worldPos = calcWorldPos(texCoords, depthSamp);
  vec3 origin = worldPos;
  vec3 direction = -ubo.lightDir.xyz;

  uint  rayFlags = 
    gl_RayFlagsOpaqueEXT |   // All geometry is considered opaque
    gl_RayFlagsTerminateOnFirstHitEXT | // We don't care about finding _closest_ hit, just if _something_ is hit
    gl_RayFlagsSkipClosestHitShaderEXT; // Skip running the closest hit shader at the end, since miss shader is enough
  float tMin     = 0.1;
  float tMax     = 50.0;

  prd.hitValue = 0.0f;

  traceRayEXT(tlas, // acceleration structure
          rayFlags,       // rayFlags
          0xFF,           // cullMask
          0,              // sbtRecordOffset
          0,              // sbtRecordStride
          0,              // missIndex
          origin.xyz,     // ray origin
          tMin,           // ray min range
          direction.xyz,  // ray direction
          tMax,           // ray max range
          0               // payload (location = 0)
  );

  imageStore(outputIm, pixel, vec4(prd.hitValue));
}