#version 450

#extension GL_GOOGLE_include_directive : enable
#include "scene_ubo.glsl"
#include "bindless.glsl"

layout (local_size_x = 32, local_size_y = 32) in;

struct DrawCommand
{
  uint indexCount;
  uint instanceCount;
  uint firstIndex;
  int vertexOffset;
  uint firstInstance;
};

struct TranslationId
{
  uint renderableIndex;
  uint meshOffset;
};

layout(std430, set = 1, binding = 0) buffer DrawBuffer {
  DrawCommand draws[];
} drawBuffer;

layout(std430, set = 1, binding = 1) buffer TranslationBuffer {
  TranslationId ids[];
} translationBuffer;

layout(set = 1, binding = 2) uniform sampler2D hiz[6];

layout(std430, set = 1, binding = 3) buffer DebugSphereDrawBuffer {
  DrawCommand draw;
} debugSphereDrawBuffer;

layout(std430, set = 1, binding = 4) buffer DebugSphereTranslationBuffer {
  TranslationId ids[];
} debugSphereTransBuffer;

layout(std430, set = 1, binding = 5) buffer PointLightShadowDrawBufs {
  DrawCommand draws[];
} shadowDrawBufs[4];

layout(std430, set = 1, binding = 6) buffer PointLightShadowCountBuf {
  uint count;
} shadowCountBufs[4];

layout(std430, set = 1, binding = 7) buffer PointLightShadowTransBuf {
  TranslationId ids[];
} shadowTransBufs[4];

layout(std430, set = 1, binding = 8) buffer TerrainDrawBuffer {
  DrawCommand draws[];
} terrainDrawBuffer;

layout(std430, set = 1, binding = 9) buffer TerrainTranslationBuffer {
  TranslationId ids[];
} terrainTranslationBuffer;

layout(push_constant) uniform constants {
  mat4 view;
  vec4 frustumPlanes[4];
  ivec4 pointLightShadowIndices;
  float nearDist;
  float farDist;
  uint drawCount;
  float windDirX;
  float windDirY;
} pushConstants;

const uint k = 1103515245U;  // GLIB C

vec3 hash(uvec3 x)
{
  x = ((x>>8U)^x.yzx)*k;
  x = ((x>>8U)^x.yzx)*k;
  x = ((x>>8U)^x.yzx)*k;
    
  return vec3(x)*(1.0/float(0xffffffffU));
}

float rand(vec2 co){
  return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

// 2D Polyhedral Bounds of a Clipped, Perspective-Projected 3D Sphere. Michael Mara, Morgan McGuire. 2013
bool projectSphere(vec3 C, float r, float znear, float P00, float P11, out vec4 aabb)
{
  if (C.z > r + znear)
    return false;

  vec2 cx = -C.xz;
  vec2 vx = vec2(sqrt(dot(cx, cx) - r * r), r);
  vec2 minx = mat2(vx.x, vx.y, -vx.y, vx.x) * cx;
  vec2 maxx = mat2(vx.x, -vx.y, vx.y, vx.x) * cx;

  vec2 cy = -C.yz;
  vec2 vy = vec2(sqrt(dot(cy, cy) - r * r), r);
  vec2 miny = mat2(vy.x, vy.y, -vy.y, vy.x) * cy;
  vec2 maxy = mat2(vy.x, -vy.y, vy.y, vy.x) * cy;

  aabb = vec4(minx.x / minx.y * P00, miny.x / miny.y * P11, maxx.x / maxx.y * P00, maxy.x / maxy.y * P11);
  aabb = aabb.xwzy * vec4(0.5f, -0.5f, 0.5f, -0.5f) + vec4(0.5f); // clip space -> uv space

  return true;
}

bool projectSphere2(vec3 sphereView, float radius, out vec4 aabb, out vec2 zMinMax)
{
  vec3 botRightViewFar = vec3(sphereView.x + radius, sphereView.y - radius, sphereView.z - radius);
  vec3 topLeftViewFar = vec3(sphereView.x - radius, sphereView.y + radius, sphereView.z - radius);
  vec3 botRightViewNear = vec3(sphereView.x + radius, sphereView.y - radius, sphereView.z + radius);
  vec3 topLeftViewNear = vec3(sphereView.x - radius, sphereView.y + radius, sphereView.z + radius);

  vec4 botRightNDCFar = ubo.proj * vec4(botRightViewFar, 1.0);
  botRightNDCFar /= botRightNDCFar.w;

  vec4 topLeftNDCFar = ubo.proj * vec4(topLeftViewFar, 1.0);
  topLeftNDCFar /= topLeftNDCFar.w;

  vec4 botRightNDCNear = ubo.proj * vec4(botRightViewNear, 1.0);
  botRightNDCNear /= botRightNDCNear.w;

  vec4 topLeftNDCNear = ubo.proj * vec4(topLeftViewNear, 1.0);
  topLeftNDCNear /= topLeftNDCNear.w;

  if (abs(topLeftNDCFar.x) > 1.0 ||
    abs(topLeftNDCFar.y) > 1.0 ||
    topLeftNDCFar.z > 1.0 ||
    topLeftNDCFar.z < 0.0) {
    return false;
  }

  if (abs(botRightNDCFar.x) > 1.0 ||
    abs(botRightNDCFar.y) > 1.0 ||
    botRightNDCFar.z > 1.0 ||
    botRightNDCFar.z < 0.0) {
    return false;
  }

  if (abs(topLeftNDCNear.x) > 1.0 ||
    abs(topLeftNDCNear.y) > 1.0 ||
    topLeftNDCNear.z > 1.0 ||
    topLeftNDCNear.z < 0.0) {
    return false;
  }

  if (abs(botRightNDCNear.x) > 1.0 ||
    abs(botRightNDCNear.y) > 1.0 ||
    botRightNDCNear.z > 1.0 ||
    botRightNDCNear.z < 0.0) {
    return false;
  }

  float minZ = min(topLeftNDCNear.z, botRightNDCNear.z);
  float maxZ = max(topLeftNDCFar.z, botRightNDCFar.z);
  zMinMax = vec2(minZ, maxZ);

  // -1 to 1 to 0 to 1
  botRightNDCFar = botRightNDCFar * 0.5 + 0.5;
  topLeftNDCFar = topLeftNDCFar * 0.5 + 0.5;
  botRightNDCNear = botRightNDCNear * 0.5 + 0.5;
  topLeftNDCNear = topLeftNDCNear * 0.5 + 0.5;

  // (minx, maxx, miny, maxy)
  aabb = vec4(topLeftNDCFar.x, botRightNDCFar.x, topLeftNDCFar.y, botRightNDCFar.y);

  return true;
}

bool sphereVisible(vec3 sphereCenter, float sphereRadius)
{
  bool visible = true;
  for (int i = 0; i < 4; i++) {
    vec3 frustumNormal = pushConstants.frustumPlanes[i].xyz;
    float frustumD = pushConstants.frustumPlanes[i].w;
    bool inFrustum = (dot(sphereCenter, frustumNormal) + frustumD + sphereRadius) >= 0.0;
    visible = visible && inFrustum;
  }

  return visible;
}

const vec3 up = vec3(0.0, 1.0, 0.0);

float sampleHiZ(vec2 coords, uint level)
{
  float ret = 1.0;
  uint clampedLevel = clamp(level, 0u, 5u);
  ret = texture(hiz[clampedLevel], coords).r;

  return ret;
}

bool occlusionCull(vec3 sphereCenterView, float radius)
{
  bool visible = true;

  // aabb is (minx, maxx, miny, maxy) in 0-1 coords in NDC space
  vec4 aabb;
  vec2 zMinMax;
  bool projOk = projectSphere2(sphereCenterView, radius, aabb, zMinMax);
  if (projOk) {
    float width = (aabb.y - aabb.x) * 64.0;
    float height = (aabb.w - aabb.z) * 64.0;

    uint level = uint(max(floor(log2(max(width, height))), 1));

    float depth = 1.0;
    float depth0 = sampleHiZ(vec2(aabb.xz), level - 1);
    float depth1 = sampleHiZ(vec2(aabb.yw), level - 1);
    float depth2 = sampleHiZ(vec2(aabb.xw), level - 1);
    float depth3 = sampleHiZ(vec2(aabb.yz), level - 1);

    depth = max(max(depth0, depth1), max(depth2, depth3));

    vec3 adjusted = vec3(sphereCenterView.x, sphereCenterView.y, sphereCenterView.z + radius);
    vec4 projected = ubo.proj * vec4(adjusted, 1.0);
    projected /= projected.w;
    float depthSphere = zMinMax.x - 0.001;//projected.z;//pushConstants.nearDist / (sphereCenterView.z - radius);

    visible = depthSphere <= depth;
  }

  return visible;
}

mat4 buildTranslation(mat4 model)
{
  vec3 delta = vec3(model[3][0], model[3][1], model[3][2]);

  return mat4(
        vec4(1.0, 0.0, 0.0, 0.0),
        vec4(0.0, 1.0, 0.0, 0.0),
        vec4(0.0, 0.0, 1.0, 0.0),
        vec4(delta, 1.0));
}

bool withinRangeOfCamera(vec3 renderablePos, float range)
{
  return distance(ubo.cameraPos.xyz, renderablePos) <= range;
}

void checkBSAgainstPointLightShadows(vec3 boundingSphereWorld, float radius, uint drawIndex, uint meshOffset, uint renderableIndex)
{
  // Go through all 4 (TODO: variable size) point light shadows
  for (int i = 0; i < 4; ++i) {
    int idx = pushConstants.pointLightShadowIndices[i];
    if (idx == -1) {
      continue;
    }

    Light light = lightBuffer.lights[idx];
    float lightRadius = light.worldPos.w;
    vec3 lightPos = light.worldPos.xyz;

    // Do a sphere-sphere intersect
    float d = distance(lightPos, boundingSphereWorld);
    if (lightRadius + radius >= d) {
      // add a draw call for this index
      uint shadowDrawIdx = atomicAdd(shadowCountBufs[i].count, 1);

      shadowDrawBufs[i].draws[drawIndex].indexCount = drawBuffer.draws[drawIndex].indexCount;
      shadowDrawBufs[i].draws[drawIndex].firstIndex = drawBuffer.draws[drawIndex].firstIndex;
      shadowDrawBufs[i].draws[drawIndex].vertexOffset = drawBuffer.draws[drawIndex].vertexOffset;
      shadowDrawBufs[i].draws[drawIndex].firstInstance = drawBuffer.draws[drawIndex].firstInstance;
      
      uint countBefore = atomicAdd(shadowDrawBufs[i].draws[drawIndex].instanceCount, 1);

      // Update translation buffer (from gl_InstanceIndex to renderableId and meshId)
      uint instanceIndex = shadowDrawBufs[i].draws[drawIndex].firstInstance + countBefore;
      shadowTransBufs[i].ids[instanceIndex].renderableIndex = renderableIndex;
      shadowTransBufs[i].ids[instanceIndex].meshOffset = meshOffset;
    }
  }
}

void main()
{
  // Renderable culling
  uint gID = gl_GlobalInvocationID.x * gl_NumWorkGroups.x * 32 + gl_GlobalInvocationID.y;

  if (gID < pushConstants.drawCount) {

    // Check visibility against frustum planes
    bool visible = visibleBitSet(renderableBuffer.renderables[gID]);
    bool isTerrain = renderableBuffer.renderables[gID].terrainOffset >= 0;

    if (visible) {

      mat4 model = renderableBuffer.renderables[gID].transform;
      mat4 trans = buildTranslation(model);
      vec4 sphereBounds = renderableBuffer.renderables[gID].bounds;
      float radius = sphereBounds.w;
      vec3 sphereCenterView = vec3(pushConstants.view * trans * vec4(sphereBounds.xyz, 1.0));
      vec3 sphereCenter = vec3(trans * vec4(sphereBounds.xyz, 1.0));

      // For TLAS update, just see if renderable is within a circular range of camera
      bool withinRange = withinRangeOfCamera(sphereCenter, 50.0);
      uint rendIndex = gID;
      renderableBuffer.renderables[rendIndex].visible = setCullBit(renderableBuffer.renderables[gID], !withinRange);

      visible = visible && sphereCenterView.z + radius > -pushConstants.farDist;
      visible = visible && sphereCenterView.z - radius < pushConstants.nearDist;
      visible = visible && sphereVisible(sphereCenter, radius);

      if (visible) {

        // Do occlusion culling
        visible = occlusionCull(sphereCenterView, radius);

        if (visible) {

          for (int i = 0; i < renderableBuffer.renderables[gID].numMeshes; ++i) {
            // Per mesh frustum culling
            uint meshOffset = renderableBuffer.renderables[gID].modelOffset + i;
            uint meshIndex = rendModelBuffer.indices[meshOffset];
            MeshInfo meshInfo = meshBuffer.meshes[meshIndex];

            // Construct simple bounding sphere for this mesh
            vec4 meshBs = constructBoundingSphere(meshInfo);
            vec3 scale = getScale(model);
            meshBs.xyz = vec3(model * vec4(meshBs.xyz, 1.0));
            meshBs.w *= scale.x; // NOTE: Assuming uniform scaling!

            visible = sphereVisible(meshBs.xyz, meshBs.w);

            if (visible) {
              vec3 meshBsView = vec3(pushConstants.view * vec4(meshBs.xyz, 1.0));
              visible = occlusionCull(meshBsView, meshBs.w);

              if (visible) {
                // Point light shadows, they have their own respective draw buffers
                checkBSAgainstPointLightShadows(meshBs.xyz, meshBs.w, meshIndex, meshOffset, gID);

                // Terrain has its own draw buffer
                if (isTerrain) {
                  uint countBefore = atomicAdd(terrainDrawBuffer.draws[meshIndex].instanceCount, 1);

                  // Update translation buffer (from gl_InstanceIndex to renderableId and meshId)
                  uint instanceIndex = terrainDrawBuffer.draws[meshIndex].firstInstance + countBefore;
                  terrainTranslationBuffer.ids[instanceIndex].renderableIndex = gID;
                  terrainTranslationBuffer.ids[instanceIndex].meshOffset = meshOffset;
                }
                else {
                  uint countBefore = atomicAdd(drawBuffer.draws[meshIndex].instanceCount, 1);

                  // Update translation buffer (from gl_InstanceIndex to renderableId and meshId)
                  uint instanceIndex = drawBuffer.draws[meshIndex].firstInstance + countBefore;
                  translationBuffer.ids[instanceIndex].renderableIndex = gID;
                  translationBuffer.ids[instanceIndex].meshOffset = meshOffset;
                }

                // Also add debug sphere instances if it is enabled
                if (checkUboFlag(UBO_BS_VIS_FLAG)) {
                  uint countBef = atomicAdd(debugSphereDrawBuffer.draw.instanceCount, 1);
                  debugSphereTransBuffer.ids[countBef].renderableIndex = gID;
                  debugSphereTransBuffer.ids[countBef].meshOffset = meshOffset;
                }
              }
            }
          }
        }
      }
    }
  }
}