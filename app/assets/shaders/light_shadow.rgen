#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_GOOGLE_include_directive : enable

#include "bindless.glsl"
#include "bindless_tlas.glsl"
#include "scene_ubo.glsl"
#include "helpers.glsl"
#include "octahedron_helpers.glsl"
#include "light_shadow_helpers.glsl"

layout(set = 1, binding = 0, r32f) uniform writeonly image2D distIm;
layout(set = 1, binding = 1, rgba8) uniform writeonly image2D dirIm;

const float GOLDEN_RATIO = 1.6180339887;
const float PI = 3.14159265359;
const float EPSILON = 1e-6;

struct hitPayload
{
  float dist;
  float maxDist;
};

layout(location = 0) rayPayloadEXT hitPayload payload;

vec3 worldDirFromFibonacciIndex(uint idx)
{
  float theta = 2.0 * PI * float(idx) / GOLDEN_RATIO;
  float phi = acos(1.0 - 2.0 * (float(idx) + 0.5) / float(NUM_RAYS_PER_LIGHT));

  vec3 outDir = vec3(
    cos(theta) * sin(phi),
    sin(theta) * sin(phi),
    cos(phi));

  return normalize(outDir);
}

void main()
{
  // Find which light this invocation corresponds to
  ivec2 pixel = ivec2(gl_LaunchIDEXT.xy);
  ivec2 pixelWithinLight = pixel;
  uint lightIndex = gl_LaunchIDEXT.z;

  pixel.x += int(lightIndex) * LIGHT_DIR_DIST_PIX_SIZE;

  int rayIndex = pixelWithinLight.y * LIGHT_DIR_DIST_PIX_SIZE + pixelWithinLight.x;

  Light light = lightBuffer.lights[lightIndex];

  // If the light is not enabled, don't shoot a ray
  if (light.color.w < 0.5) {
    imageStore(distIm, pixel, vec4(0.0));
    imageStore(dirIm, pixel, vec4(0.0));
    return;
  }

  // Create a directional vector from the "ray index"
  vec3 worldDir = worldDirFromFibonacciIndex(rayIndex);
  vec3 origin = light.worldPos.xyz;

  uint  rayFlags =  gl_RayFlagsOpaqueEXT; // All geometry is considered opaque
  float tMin     = 0.1;
  float tMax     = light.worldPos.w;

  payload.dist = 0.0;
  payload.maxDist = light.worldPos.w;

  traceRayEXT(tlas,     // acceleration structure
        rayFlags,       // rayFlags
        0xFF,           // cullMask
        0,              // sbtRecordOffset
        0,              // sbtRecordStride
        0,              // missIndex
        origin,         // ray origin
        tMin,           // ray min range
        worldDir,       // ray direction
        tMax,           // ray max range
        0);             // payload (location = 0)

  vec3 packedDir = (worldDir.xyz + 1.0) * 0.5;
  imageStore(distIm, pixel, vec4(payload.dist, 0.0, 0.0, 1.0));
  imageStore(dirIm, pixel, vec4(packedDir, 1.0));

}