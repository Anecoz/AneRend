#version 450

layout (local_size_x = 32, local_size_y = 32) in;

layout(set = 0, binding = 0) uniform UniformBufferObject {
  mat4 view;
  mat4 proj;
  mat4 directionalShadowMatrix;
  mat4 shadowMatrix[24];
  vec4 cameraPos;
  vec4 lightDir;
  vec4 lightPos[4];
  vec4 lightColor[4];
  vec4 viewVector;
  float time;
} ubo;

struct DrawCommand
{
  uint indexCount;
  uint instanceCount;
  uint firstIndex;
  int vertexOffset;
  uint firstInstance;
};

struct GrassDrawCommand
{
  uint vertexCount;
  uint instanceCount;
  uint firstVertex;
  uint firstInstance;
};

struct Renderable
{
  mat4 transform;
  vec4 bounds;
  uint meshId;
  uint visible;
};

struct GrassObj
{
  vec4 worldPos;
  vec4 cpData0;
  vec4 cpData1;
  vec4 cpData2;
  vec4 widthDir;
};

layout(set = 0, binding = 1) uniform sampler2D windForceTex;

layout(std430, set = 0, binding = 2) readonly buffer RenderableBuffer {
  Renderable renderables[];
} renderableBuffer;

layout(std430, set = 1, binding = 0) buffer DrawBuffer {
  DrawCommand draws[];
} drawBuffer;

layout(std430, set = 1, binding = 1) buffer TranslationBuffer {
  uint ids[];
} translationBuffer;

layout(std430, set = 1, binding = 2) buffer GrassDrawBuffer {
  GrassDrawCommand draw;
} grassDrawBuffer;

layout(std430, set = 1, binding = 3) buffer GrassObjBuffer {
  GrassObj blades[];
} grassObjBuffer;

layout(push_constant) uniform constants {
  mat4 view;
  vec4 frustumPlanes[4];
  float nearDist;
  float farDist;
  uint drawCount;
  float windDirX;
  float windDirY;
} pushConstants;

const uint k = 1103515245U;  // GLIB C

vec3 hash(uvec3 x)
{
  x = ((x>>8U)^x.yzx)*k;
  x = ((x>>8U)^x.yzx)*k;
  x = ((x>>8U)^x.yzx)*k;
    
  return vec3(x)*(1.0/float(0xffffffffU));
}

float rand(vec2 co){
  return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

bool sphereVisible(vec3 sphereCenter, float sphereRadius)
{
  bool visible = true;
  for (int i = 0; i < 4; i++) {
    vec3 frustumNormal = pushConstants.frustumPlanes[i].xyz;
    float frustumD = pushConstants.frustumPlanes[i].w;
    bool inFrustum = (dot(sphereCenter, frustumNormal) + frustumD + sphereRadius) >= 0.0;
    visible = visible && inFrustum;
  }

  return visible;
}

const vec3 up = vec3(0.0, 1.0, 0.0);

void main()
{
  // Renderable culling
  uint gID = gl_GlobalInvocationID.x * gl_NumWorkGroups.x * 32 + gl_GlobalInvocationID.y;

  if (gID < pushConstants.drawCount) {

    // Check visibility against frustum planes
    bool visible = renderableBuffer.renderables[gID].visible == 1 ? true : false;
    if (visible) {

      mat4 model = renderableBuffer.renderables[gID].transform;
      vec4 sphereBounds = renderableBuffer.renderables[gID].bounds;
      float radius = sphereBounds.w;
      vec3 sphereCenterView = vec3(pushConstants.view * model * vec4(sphereBounds.xyz, 1.0));
      vec3 sphereCenter = vec3(model * vec4(sphereBounds.xyz, 1.0));

      visible = visible && sphereCenterView.z > -pushConstants.farDist;
      visible = visible && sphereCenterView.z < pushConstants.nearDist;
      visible = visible && sphereVisible(sphereCenter, radius);

      if (visible) {

        uint meshId = renderableBuffer.renderables[gID].meshId;
        uint countBefore = atomicAdd(drawBuffer.draws[meshId].instanceCount, 1);

        // Update translation buffer (from gl_InstanceIndex to renderableId)
        uint instanceIndex = drawBuffer.draws[meshId].firstInstance + countBefore;
        translationBuffer.ids[instanceIndex] = gID;
      }
    }
  }

  // Grass
  uint xPos = gl_GlobalInvocationID.x;
  uint yPos = gl_GlobalInvocationID.y;

  vec3 worldPos = vec3(xPos*0.08, .25, yPos*0.08);
  float radius = 1.5;
  bool visible = sphereVisible(worldPos, radius);

  if (visible) {
    uint countBefore = atomicAdd(grassDrawBuffer.draw.instanceCount, 1);

    float bladeHash = rand(vec2(worldPos.x, worldPos.z));
    vec2 bladeHash2D = vec2(
      rand(vec2(worldPos.x / bladeHash, worldPos.z)),
      rand(vec2(worldPos.x, worldPos.z * bladeHash)));

    // Jitter position slightly
    worldPos.x += bladeHash * 0.5;
    worldPos.z += bladeHash * 0.5;

    uint instanceIndex = grassDrawBuffer.draw.firstInstance + countBefore;

    // Data used to construct control points
    float height = 1.0 * max(bladeHash2D.y, 0.3);
    float windStrength = texture(windForceTex, vec2(float(xPos)/256.0, float(yPos)/256.0)).r;
    vec2 windDir = vec2(pushConstants.windDirX, pushConstants.windDirY);
    float tilt = min(bladeHash + windStrength, 1.0);
    float bend = bladeHash < 0.05 ? 0.0 : .1;
    vec2 facing2D = normalize(bladeHash2D * 2.0 - 1.0);
    facing2D = normalize(facing2D*(1.0 - windStrength) + windDir*windStrength);
    vec3 facing = vec3(facing2D.x, 0.0, facing2D.y);

    vec3 widthDir = vec3(0.0, 0.0, 0.0);
    widthDir.x = facing.z;
    widthDir.z = -facing.x;

    // Find control points of the bezier curve
    vec3 p0 = worldPos.xyz;

    // End point, or tip, is dictated by base point and the tilt
    vec3 p3 = p0 + facing * tilt + up * height;

    vec3 bladeDir = normalize(p3 - p0);
    vec3 away = cross(-widthDir, bladeDir);

    // p1 is straight above p0
    vec3 p1 = p0 + up * height * bend;

    // The shaping control point is dictated by the bend parameter
    vec3 p2 = p0 + 0.5 * (p3 - p0);
    p2 = p2 + away * bend;

    // Attempt animation, find vector perpendicular to blade dir
    float phaseOffset = bladeHash * 1.57;
    float speedMult = 2.0 * (bladeHash + 1.0) * (windStrength + 1.0);
    float maxAmplitude = 0.01 * (windStrength + 3.0);
    float timeMod = mod(ubo.time, 2.0*acos(-1.0)); // To stop loss of precision when ubo.time gets big
    p3 = p3 + sin(timeMod*speedMult + phaseOffset)*maxAmplitude*away;
    p2 = p2 + sin(timeMod*speedMult + 1.57 + phaseOffset)*maxAmplitude/2.0*away;

    grassObjBuffer.blades[instanceIndex].worldPos = vec4(worldPos, height);
    grassObjBuffer.blades[instanceIndex].widthDir = vec4(widthDir, bladeHash);
    grassObjBuffer.blades[instanceIndex].cpData0 = vec4(p0, p1.x);
    grassObjBuffer.blades[instanceIndex].cpData1 = vec4(p1.yz, p2.xy);
    grassObjBuffer.blades[instanceIndex].cpData2 = vec4(p2.z, p3);
  }
}