#version 450

#extension GL_GOOGLE_include_directive : enable

#include "scene_ubo.glsl"
#include "octahedron_helpers.glsl"
#include "probe_helpers.glsl"
#include "helpers.glsl"

layout (local_size_x = 8, local_size_y = 8) in;

layout(set = 1, binding = 0, rgba16f) uniform readonly image2D irrIm;
layout(set = 1, binding = 1, rgba16f) uniform readonly image2D dirIm;
layout(set = 1, binding = 2, rgba16f) uniform image2D outputIm;

layout(push_constant) uniform constants {
  uint probeLayer;
} pc;


void main()
{
  const int xs = NUM_PROBES_PER_PLANE * PROBE_CONV_PIX_SIZE;
  const int ys = NUM_PROBES_PER_PLANE * PROBE_CONV_PIX_SIZE;;

  if (gl_GlobalInvocationID.x > xs || gl_GlobalInvocationID.y > ys) {
    return;
  }
  
  ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
  ivec2 pixelPreLayer = pixel;

  pixel.y += int(pc.probeLayer) * PROBE_CONV_PIX_SIZE * NUM_PROBES_PER_PLANE;

  ivec2 probeIdx = pixel / PROBE_CONV_PIX_SIZE;
  ivec2 probeStartPixel = (pixelPreLayer / PROBE_CONV_PIX_SIZE) * PROBE_IRR_DIR_PIX_SIZE; // in input image pixels
  ivec2 pixelWithinProbe = pixel - probeIdx * PROBE_CONV_PIX_SIZE;

  // 8x8 kernel
  int kernelSize = PROBE_IRR_DIR_PIX_SIZE;

  ivec2 pixOffset = 2 * probeIdx + 1;
  vec2 octUv = pixelToUv(pixelWithinProbe, ivec2(PROBE_CONV_PIX_SIZE));

  octUv = octUv * 2.0 - 1.0;
  vec3 octDir = octDecode(octUv);

  vec4 result = vec4(0.0);
  for (int x = 0; x < kernelSize; ++x) {
    for (int y = 0; y < kernelSize; ++y) {

      ivec2 currPix = probeStartPixel + ivec2(x, y);

      vec3 irradiance = imageLoad(irrIm, currPix).rgb;
      vec3 dir = imageLoad(dirIm, currPix).rgb;
      float weight = max(0.0, dot(dir, octDir));
      if (weight > 1e-6) {
        result += vec4(weight * irradiance, weight);
      }
    }
  }

  // Add old value
  vec4 oldVal = imageLoad(outputIm, pixOffset + pixel);
  vec4 outRes = vec4(0.0);

  if (checkUboFlag(UBO_BAKE_MODE_ON_FLAG)) {
    vec3 preWeightOldVal = oldVal.rgb * oldVal.w;

    float totalWeight = oldVal.w + result.w;

    vec3 totalResult = result.rgb + preWeightOldVal;

    if (totalWeight > 1e-6) {
      totalResult /= totalWeight;
    }

    outRes = vec4(totalResult, totalWeight);
  }
  else {
    if (result.w > 1e-6) {
      result.rgb /= result.w;
    }

    float hysteresis = 0.96;
    outRes = result * (1.0 - hysteresis) + oldVal * hysteresis;
  }

  imageStore(outputIm, pixOffset + pixel, outRes);
}