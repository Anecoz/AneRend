#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_GOOGLE_include_directive : enable

#include "bindless.glsl"
#include "bindless_tlas.glsl"
#include "scene_ubo.glsl"
#include "probe_helpers.glsl"

layout(set = 1, binding = 0, rgba16f) uniform writeonly image2D irradianceIm;
layout(set = 1, binding = 1, rgba8) uniform writeonly image2D dirIm;

const float GOLDEN_RATIO = 1.6180339887;
const float PI = 3.14159265359;
const float EPSILON = 1e-6;

struct hitPayload
{
  vec3 irradiance;
  vec3 hitPos;
  float shadow;
};

layout(location = 0) rayPayloadEXT hitPayload payload;

layout(push_constant) uniform constants {
  mat4 randomRot;
  uint probeLayer;
} pc;

float rand(vec2 co){
  return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

vec3 worldDirFromFibonacciIndex(uint idx)
{
  float theta = 2.0 * PI * float(idx) / GOLDEN_RATIO;
  float phi = acos(1.0 - 2.0 * (float(idx) + 0.5) / float(NUM_RAYS_PER_PROBE));

  vec3 outDir = vec3(
    cos(theta) * sin(phi),
    sin(theta) * sin(phi),
    cos(phi));

  return normalize(outDir);
}

void main()
{
  // Find which probe this invocation corresponds to
  ivec2 pixel = ivec2(gl_LaunchIDEXT.xy);

  int probeX = pixel.x / PROBE_IRR_DIR_PIX_SIZE;
  int probeY = int(pc.probeLayer);//pixel.y / (PROBE_IRR_DIR_PIX_SIZE * NUM_PROBES_PER_PLANE);   // THIS IS THE HEIGHT, AKA PLANE!
  int probeZ = pixel.y / PROBE_IRR_DIR_PIX_SIZE;//(pixel.y - (probeY * PROBE_IRR_DIR_PIX_SIZE * NUM_PROBES_PER_PLANE)) / PROBE_IRR_DIR_PIX_SIZE;

  ivec2 pixelWithinProbe = ivec2(pixel.x - probeX * PROBE_IRR_DIR_PIX_SIZE, pixel.y - probeZ * PROBE_IRR_DIR_PIX_SIZE);
  int rayIndex = pixelWithinProbe.y * PROBE_IRR_DIR_PIX_SIZE + pixelWithinProbe.x;

  vec3 camOffset = vec3(ubo.cameraGridPos.x - float(NUM_PROBES_PER_PLANE)/2.0, 0.0, ubo.cameraGridPos.z - float(NUM_PROBES_PER_PLANE)/2.0);
  vec3 origin = vec3(float(probeX), float(probeY) * 2.0, float(probeZ)) + camOffset;

  // Create a directional vector from the "ray index"
  vec3 worldDir = worldDirFromFibonacciIndex(rayIndex);
  worldDir = mat3(pc.randomRot) * worldDir;

  // Create a random rotation
  /*float timeMod = mod(ubo.time, 2.0*acos(-1.0)); // To stop loss of precision when ubo.time gets big
  float cosT = cos(timeMod);
  float sinT = sin(timeMod);

  mat3 rotX;
  // below are columns, not rows...
  rotX[0] = vec3(1.0, 0.0, 0.0); 
  rotX[1] = vec3(0.0, cosT, sinT);
  rotX[2] = vec3(0.0, -sinT, cosT);

  worldDir = normalize(rotX * worldDir);*/

  /*vec3 jitter = vec3(
    rand(vec2(ubo.time, -ubo.time)) * 2.0 - 1.0,
    rand(vec2(ubo.time, ubo.time)) * 2.0 - 1.0,
    rand(vec2(-ubo.time, ubo.time)) * 2.0 - 1.0
  );

  worldDir += jitter;
  worldDir = normalize(worldDir);*/

  uint  rayFlags =  gl_RayFlagsOpaqueEXT; // All geometry is considered opaque
  float tMin     = 0.1;
  float tMax     = 100.0;

  payload.irradiance = vec3(0.0);

  traceRayEXT(tlas,     // acceleration structure
        rayFlags,       // rayFlags
        0xFF,           // cullMask
        0,              // sbtRecordOffset
        0,              // sbtRecordStride
        0,              // missIndex
        origin,         // ray origin
        tMin,           // ray min range
        worldDir,       // ray direction
        tMax,           // ray max range
        0);             // payload (location = 0)

  vec3 packedDir = (worldDir.xyz + 1.0) * 0.5;
  imageStore(irradianceIm, pixel, vec4(payload.irradiance.rgb, 1.0));
  imageStore(dirIm, pixel, vec4(packedDir, 1.0));

}