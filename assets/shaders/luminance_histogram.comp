#version 450

#extension GL_GOOGLE_include_directive : enable

#include "scene_ubo.glsl"

// References:
// https://www.alextardif.com/HistogramLuminance.html
// https://bruop.github.io/exposure/

layout (local_size_x = 16, local_size_y = 16) in;

#define EPSILON 0.005

// Taken from RTR vol 4 pg. 278
#define RGB_TO_LUM vec3(0.2125, 0.7154, 0.0721)

const float minLogLum = -10.0; // "min of -10 and max of 2, making range 12"
const float inverseLogLumRange = 1.0 / 12.0;

layout(set = 1, binding = 0, rgba32f) uniform readonly image2D hdrInput;
layout(set = 1, binding = 1, rgba16f) uniform readonly image2D geom2Im;

layout(std430, set = 1, binding = 2) buffer HistogramBuffer {
  uint bins[];
} histogramBuffer;

// Shared histogram buffer used for storing intermediate sums for each work group
shared uint histogramShared[16 * 16];

// For a given color and luminance range, return the histogram bin index
uint colorToBin(vec3 hdrColor, float minLogLum, float inverseLogLumRange) {
  // Convert our RGB value to Luminance, see note for RGB_TO_LUM macro above
  float lum = dot(hdrColor, RGB_TO_LUM);

  // Avoid taking the log of zero
  if (lum < EPSILON) {
    return 0;
  }

  // Calculate the log_2 luminance and express it as a value in [0.0, 1.0]
  // where 0.0 represents the minimum luminance, and 1.0 represents the max.
  float logLum = clamp((log2(lum) - minLogLum) * inverseLogLumRange, 0.0, 1.0);

  // Map [0, 1] to [1, 255]. The zeroth bin is handled by the epsilon check above.
  return uint(logLum * 254.0 + 1.0);
}

// 16 * 16 * 1 threads per group
void main() {
  // Initialize the bin for this thread to 0
  histogramShared[gl_LocalInvocationIndex] = 0;
  barrier();

  uvec2 dim = imageSize(hdrInput).xy;
  // Ignore threads that map to areas beyond the bounds of our HDR image
  if (gl_GlobalInvocationID.x < dim.x && gl_GlobalInvocationID.y < dim.y) {
    float emissive = imageLoad(geom2Im, ivec2(gl_GlobalInvocationID.xy)).r;

    vec3 hdrColor = imageLoad(hdrInput, ivec2(gl_GlobalInvocationID.xy)).xyz;
    hdrColor -= emissive * ubo.exposure;
    uint binIndex = colorToBin(hdrColor, minLogLum, inverseLogLumRange);
    // We use an atomic add to ensure we don't write to the same bin in our
    // histogram from two different threads at the same time.
    atomicAdd(histogramShared[binIndex], 1);
  }

  // Wait for all threads in the work group to reach this point before adding our
  // local histogram to the global one
  barrier();

  // Technically there's no chance that two threads write to the same bin here,
  // but different work groups might! So we still need the atomic add.
  atomicAdd(histogramBuffer.bins[gl_LocalInvocationIndex], histogramShared[gl_LocalInvocationIndex]);
}