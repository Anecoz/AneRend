#version 450

#extension GL_GOOGLE_include_directive : enable

#include "scene_ubo.glsl"
#include "bindless.glsl"

layout (local_size_x = 8, local_size_y = 8) in;

layout(set = 1, binding = 0) uniform sampler2D inputIm;
layout(set = 1, binding = 1) uniform sampler2D depth;
layout(set = 1, binding = 2, rgba8) uniform writeonly image2D outputIm;

vec3 calcViewSpacePos(vec2 texCoord, float depthSamp)
{
  vec4 clipSpacePos = vec4(texCoord * 2.0 - vec2(1.0), depthSamp, 1.0);

  vec4 position = ubo.invProj * clipSpacePos; // Use this for view space
  //vec4 position = ubo.invViewProj * clipSpacePos; // Use this for world space

  return(position.xyz / position.w);
}

void main()
{
  ivec2 outputImSize = imageSize(outputIm);

  if (gl_GlobalInvocationID.x > outputImSize.x || gl_GlobalInvocationID.y > outputImSize.y) {
    return;
  }
  
  ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
  vec2 texCoords = (vec2(pixel) + 0.5) / vec2(outputImSize.x, outputImSize.y);

  float depthSamp = texture(depth, texCoords).r;

  // Early exit if we're in the sky
  if (depthSamp == 1.0f) {
    imageStore(outputIm, pixel, vec4(0.0));
    return;
  }

  // bilateral filter from here https://en.wikipedia.org/wiki/Bilateral_filter
  // but using view space depth instead of pixel intensity
  vec2 texelSize = 1.0 / vec2(textureSize(inputIm, 0));

  // 8x8 kernel
  int kernelSize = 4;

  /*
    As the range parameter sigmaR increases, the bilateral filter gradually approaches Gaussian convolution more closely because the range Gaussian widens and flattens, which means that it becomes nearly constant over the intensity interval of the image.
    As the spatial parameter sigmaD increases, the larger features get smoothened.
  */
  float sigmaD = 128.0;
  float sigmaR = 16.0;

  float weights = 0.0;
  vec3 outCol = vec3(0.0);
  for (int x = -kernelSize/2; x < kernelSize/2; ++x) {
    for (int y = -kernelSize/2; y < kernelSize/2; ++y) {
      vec2 offset = vec2(float(x), float(y)) * texelSize;
      float currDepthSamp = texture(depth, texCoords + offset).r;
      //vec3 viewSpace = calcViewSpacePos(texCoords + offset, currDepthSamp);

      vec3 currSamp = texture(inputIm, texCoords + offset).rgb;

      vec2 currPix = vec2(float(pixel.x) + float(x), float(pixel.y) + float(y));

      float a = (float(pixel.x) - currPix.x) * (float(pixel.x) - currPix.x) + (float(pixel.y) - currPix.y) * (float(pixel.y) - currPix.y);
      float b = 2.0 * (sigmaD * sigmaD);
      float c = abs((depthSamp - currDepthSamp) * (depthSamp - currDepthSamp));
      float d = 2.0 * (sigmaR * sigmaR);

      float weight = exp(-1.0 * (a / b) - (c / d));

      outCol += weight * currSamp;
      weights += weight;
    }
  }

  outCol /= weights;

  //vec3 currSamp = texture(inputIm, texCoords).rgb;

  imageStore(outputIm, pixel, vec4(outCol, 1.0));
  //imageStore(outputIm, pixel, vec4(currSamp, 1.0));
  //imageStore(outputIm, pixel, vec4(1.0));
}