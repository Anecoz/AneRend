#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : enable

#include "bindless.glsl"
#include "bindless_tlas.glsl"
#include "scene_ubo.glsl"
#include "octahedron_helpers.glsl"
#include "surfel_helpers.glsl"
#include "helpers.glsl"

struct hitPayload
{
  vec3 irradiance;
  vec3 hitPos;
  bool shadow;
  bool lastCascade;
};

layout(location = 0) rayPayloadEXT hitPayload payload;

layout(set = 1, binding = 0) uniform sampler2D depth;
layout(set = 1, binding = 1) uniform sampler2D im0;
layout(set = 1, binding = 2, rgba8) uniform writeonly image2D outputDirIm;
layout(set = 1, binding = 3, rgba16f) uniform writeonly image2D outputIrrIm;

layout(push_constant) uniform constants {
  uint cascade;
} pc;


// Generate a uniform power cosine ray on a hemisphere
// Input on 0,1 and output on -1,1 (z of output points up, and is on 0,1)
vec3 uniformPowerCosine(float u, float v)
{
  const float PI = 3.14159265359;
  //float m = 0.0;
  //float theta = acos(pow(1.0 - u, 1.0 / (1.0 + m)));
  float theta = acos(1.0 - u);
  float phi = 2.0 * PI * v;

  vec3 ray;
  ray.x = sin(theta) * cos(phi);
  ray.y = sin(theta) * sin(phi);
  ray.z = cos(theta);

  return ray;
}

vec3 calcWorldPos(vec2 texCoord, float depthSamp)
{
  vec4 clipSpacePos = vec4(texCoord * 2.0 - vec2(1.0), depthSamp, 1.0);

  vec4 position = ubo.invViewProj * clipSpacePos; // Use this for world space

  return(position.xyz / position.w);
}

void main()
{
  // Pixel to write into of the output direction and irradiance images
  ivec2 pixel = ivec2(gl_LaunchIDEXT.xy);

  uint irrDirPixSize = SURFEL_DIR_IRR_PIX_SIZE[pc.cascade];

  // Figure out the center pixel of the surfel we belong to
  ivec2 surfelIdx = pixel / int(irrDirPixSize);
  ivec2 surfelCenterPixel = surfelIdx * int(irrDirPixSize) + int(irrDirPixSize) / 2;

  // Gather world position and normal from the depth buffer and gbuffer
  vec2 texCoord = pixelToUv(surfelCenterPixel, imageSize(outputDirIm));

  float depthSamp = texture(depth, texCoord).r;

  // If we're in the sky, early exit
  if (depthSamp == 1.0f) {
    imageStore(outputDirIm, pixel, vec4(0.0));
    imageStore(outputIrrIm, pixel, vec4(0.0));
    return;
  }

  vec3 worldPos = calcWorldPos(texCoord, depthSamp);
  vec4 im0Samp = texture(im0, texCoord);
  vec3 normal = normalize(im0Samp.rgb);

  // Calculate a "ray index", a number for the current ray within the current surfel
  ivec2 pixelWithinSurfel = pixel - surfelIdx * int(irrDirPixSize);
  float rayIndexX = (float(pixelWithinSurfel.x) + 0.5) / float(irrDirPixSize);
  float rayIndexY = (float(pixelWithinSurfel.y) + 0.5) / float(irrDirPixSize);

  // Find a direction for this ray
  // Note that z of dir points "up" in the local hemisphere cs!
  vec3 dir = uniformPowerCosine(rayIndexX, rayIndexY);

  // Change basis of dir. Normal will be new "up" and we need to find new "x" and "y"
  vec3 b1 = normal;
  vec3 different = (abs(b1.x) < 0.5) ? vec3(1.0, 0.0, 0.0) : vec3(0.0, 1.0, 0.0);
  vec3 b2 = normalize(cross(b1, different));
  vec3 b3 = cross(b2, b1);

  dir = normalize(dir.x * b3 + dir.y * b2 + dir.z * b1);

  uint  rayFlags =  gl_RayFlagsOpaqueEXT; // All geometry is considered opaque
  float tMin     = 0.1;
  float tMax     = SURFEL_T_MAX[pc.cascade];

  payload.irradiance = vec3(0.0);
  payload.hitPos.x = SURFEL_T_MIN[pc.cascade];
  payload.lastCascade = pc.cascade == 3;

  traceRayEXT(tlas,     // acceleration structure
        rayFlags,       // rayFlags
        0xFF,           // cullMask
        0,              // sbtRecordOffset
        0,              // sbtRecordStride
        0,              // missIndex
        worldPos,       // ray origin
        tMin,           // ray min range
        dir,            // ray direction
        tMax,           // ray max range
        0);             // payload (location = 0)

  vec3 packedDir = (dir + 1.0) * 0.5;
  imageStore(outputDirIm, pixel, vec4(packedDir, 1.0));
  imageStore(outputIrrIm, pixel, vec4(payload.irradiance.rgb, 1.0));

  // Calculate the oct UV and then pixel of this particular dir.
  /*vec2 octUv = octEncode(dir) * 0.5 + 0.5;
  ivec2 octPixel = uvToPixel(octUv, ivec2(SURFEL_OCT_PIX_SIZE[pc.cascade]));

  ivec2 imagePixel = surfelIdx * int(irrDirPixSize) + octPixel;
  imageStore(outputIrrIm, imagePixel, vec4(payload.irradiance.rgb, 1.0));*/
}